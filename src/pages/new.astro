---
import Layout from "../layouts/Layout.astro";
---

<Layout title="New Note">
    <h1>Create New Note</h1>
    <form id="new-note-form">
        <label for="content">Content:</label>
        <textarea id="content" name="content" required></textarea>

        <label for="pov_type">POV Type:</label>
        <select id="pov_type" name="pov_type" required>
            <option value="">Select POV Type</option>
            <option value="First Person">First Person</option>
            <option value="Second Person">Second Person</option>
            <option value="Third Person Limited">Third Person Limited</option>
            <option value="Third Person Omniscient"
                >Third Person Omniscient</option
            >
        </select>

        <label for="narrator_trustworthiness">Narrator Trustworthiness:</label>
        <textarea id="narrator_trustworthiness" name="narrator_trustworthiness"
        ></textarea>

        <label for="epistemic_anomalies">Epistemic Anomalies:</label>
        <textarea id="epistemic_anomalies" name="epistemic_anomalies"
        ></textarea>

        <label for="narration_nodes">Narration Nodes:</label>
        <textarea
            id="narration_nodes"
            name="narration_nodes"
            placeholder="Enter as JSON array of objects with 'element' and 'description' fields"
        ></textarea>

        <label for="tags">Tags (comma-separated):</label>
        <input type="text" id="tags" name="tags" />

        <label for="sequence_position">Sequence Position:</label>
        <input type="number" id="sequence_position" name="sequence_position" />

        <label for="source">Source:</label>
        <input type="text" id="source" name="source" />

        <button type="submit">Create Note</button>
    </form>
</Layout>

<script>
    const form = document.getElementById("new-note-form") as HTMLFormElement;
    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        const note = {
            content: formData.get("content"),
            pov_type: formData.get("pov_type"),
            narrator_trustworthiness: formData.get("narrator_trustworthiness"),
            epistemic_anomalies: formData.get("epistemic_anomalies"),
            narration_nodes: JSON.parse(
                (formData.get("narration_nodes") as string) || "[]",
            ),
            tags: (formData.get("tags") as string)
                .split(",")
                .map((tag) => tag.trim()),
            sequence_position: Number(formData.get("sequence_position")),
            source: formData.get("source"),
        };

        try {
            const response = await fetch("/api/notes", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(note),
            });

            if (response.ok) {
                window.location.href = "/";
            } else {
                const error = await response.json();
                alert(`Error creating note: ${error.message}`);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("An unexpected error occurred");
        }
    });
</script>

<style>
    form {
        display: flex;
        flex-direction: column;
    }
    label {
        margin-top: 1rem;
    }
    textarea,
    select,
    input {
        margin-top: 0.5rem;
        padding: 0.5rem;
    }
    textarea {
        height: 100px;
    }
    button {
        margin-top: 1rem;
        padding: 0.5rem;
        background-color: #4a4a4a;
        color: white;
        border: none;
        cursor: pointer;
    }
    button:hover {
        background-color: #3a3a3a;
    }
</style>
